{"meta":{"title":"狐の小屋","subtitle":"","description":"","author":"Mythe","url":"http://mythe51.github.io","root":"/"},"pages":[{"title":"投喂","date":"2022-04-21T15:11:06.000Z","updated":"2022-04-22T03:10:00.345Z","comments":false,"path":"donate/index.html","permalink":"http://mythe51.github.io/donate/index.html","excerpt":"","text":""},{"title":"about","date":"2022-04-21T07:50:35.000Z","updated":"2022-04-21T07:50:35.756Z","comments":true,"path":"about/index.html","permalink":"http://mythe51.github.io/about/index.html","excerpt":"","text":""},{"title":"music","date":"2022-04-22T01:39:11.000Z","updated":"2022-04-22T01:39:11.929Z","comments":true,"path":"music/index.html","permalink":"http://mythe51.github.io/music/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-04-21T15:11:06.000Z","updated":"2022-04-24T04:02:02.861Z","comments":true,"path":"link/index.html","permalink":"http://mythe51.github.io/link/index.html","excerpt":"","text":""},{"title":"nanatoserver","date":"2022-04-23T09:24:17.000Z","updated":"2022-04-23T09:24:18.019Z","comments":true,"path":"nanatoserver/index.html","permalink":"http://mythe51.github.io/nanatoserver/index.html","excerpt":"","text":""},{"title":"shuoshuo","date":"2022-05-11T04:42:41.021Z","updated":"2022-05-11T04:42:41.021Z","comments":false,"path":"shuoshuo/index.html","permalink":"http://mythe51.github.io/shuoshuo/index.html","excerpt":"","text":"第一个说说 2020年2月25日 (function () { var oldClass = \"\"; var Obj = \"\"; $(\".cbp_tmtimeline li\").hover(function () { Obj = $(this).children(\".shuoshuo_author_img\"); Obj = Obj.children(\"img\"); oldClass = Obj.attr(\"class\"); var newClass = oldClass + \" zhuan\"; Obj.attr(\"class\", newClass); }, function () { Obj.attr(\"class\", oldClass); }) })"},{"title":"","date":"2022-05-11T04:42:36.352Z","updated":"2022-05-11T04:42:36.352Z","comments":true,"path":"shuoshuo/shuoshuo.css","permalink":"http://mythe51.github.io/shuoshuo/shuoshuo.css","excerpt":"","text":"#shuoshuo_content { background-color: #fff; padding: 10px; min-height: 500px; } /* shuo */ body.theme-dark .cbp_tmtimeline::before { background: RGBA(255, 255, 255, 0.06); } ul.cbp_tmtimeline { padding: 0; } div class.cdp_tmlabel > li .cbp_tmlabel { margin-bottom: 0; } .cbp_tmtimeline { margin: 30px 0 0 0; padding: 0; list-style: none; position: relative; } /* The line */ .cbp_tmtimeline:before { content: ''; position: absolute; top: 0; bottom: 0; width: 4px; background: RGBA(0, 0, 0, 0.02); left: 80px; margin-left: 10px; } /* The date/time */ .cbp_tmtimeline > li .cbp_tmtime { display: block; /* width: 29%; */ /* padding-right: 110px; */ max-width: 70px; position: absolute; } .cbp_tmtimeline > li .cbp_tmtime span { display: block; text-align: right; } .cbp_tmtimeline > li .cbp_tmtime span:first-child { font-size: 0.9em; color: #bdd0db; } .cbp_tmtimeline > li .cbp_tmtime span:last-child { font-size: 1.2em; color: #9BCD9B; } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmtime span:last-child { color: RGBA(255, 125, 73, 0.75); } div.cbp_tmlabel > p { margin-bottom: 0; } /* Right content */ .cbp_tmtimeline > li .cbp_tmlabel { margin: 0 0 45px 65px; background: #9BCD9B; color: #fff; padding: .8em 1.2em .4em 1.2em; /* font-size: 1.2em; */ font-weight: 300; line-height: 1.4; position: relative; border-radius: 5px; transition: all 0.3s ease 0s; box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15); cursor: pointer; display: block; } .cbp_tmlabel:hover { /* transform:scale(1.05); */ transform: translateY(-3px); z-index: 1; box-shadow: 0 15px 32px rgba(0, 0, 0, 0.15) !important } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmlabel { background: RGBA(255, 125, 73, 0.75); } /* The triangle */ .cbp_tmtimeline > li .cbp_tmlabel:after { right: 100%; border: solid transparent; content: \" \"; height: 0; width: 0; position: absolute; pointer-events: none; border-right-color: #9BCD9B; border-width: 10px; top: 4px; } .cbp_tmtimeline > li:nth-child(odd) .cbp_tmlabel:after { border-right-color: RGBA(255, 125, 73, 0.75); } p.shuoshuo_time { margin-top: 10px; border-top: 1px dashed #fff; padding-top: 5px; } /* Media */ @media screen and (max-width: 65.375em) { .cbp_tmtimeline > li .cbp_tmtime span:last-child { font-size: 1.2em; } } .shuoshuo_author_img img { border: 1px solid #ddd; padding: 2px; float: left; border-radius: 64px; transition: all 1.0s; } .avatar { border-radius: 100% !important; -moz-border-radius: 100% !important; box-shadow: inset 0 -1px 0 3333sf; -webkit-box-shadow: inset 0 -1px 0 3333sf; -webkit-transition: 0.4s; -webkit-transition: -webkit-transform 0.4s ease-out; transition: transform 0.4s ease-out; -moz-transition: -moz-transform 0.4s ease-out; } .zhuan { transform: rotateZ(720deg); -webkit-transform: rotateZ(720deg); -moz-transform: rotateZ(720deg); } /* end */"}],"posts":[{"title":"折半查找","slug":"折半查找","date":"2022-07-22T13:16:37.000Z","updated":"2022-07-22T13:31:32.385Z","comments":true,"path":"2022/07/22/折半查找/","link":"","permalink":"http://mythe51.github.io/2022/07/22/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/","excerpt":"","text":"根据王道教材编写的折半查找的示例代码。 /* 时间：2022年7月22日21:06:51 作者：Mythe 根据王道书上的代码，写的折半查找的示例代码。 */ # include &lt;stdio.h> # include &lt;stdlib.h> typedef struct List &amp;#123; int * data; int length; &amp;#125;List, *SeqList; // 将数据初始化为从0到1000 void InitList(SeqList L) &amp;#123; L->data = (int *)malloc(sizeof(int) * 1001); L->length = 0; int i = 0; for (i=0; i&lt;1000; i++) &amp;#123; L->data[L->length] = i + 1; L->length++; &amp;#125; return; &amp;#125; int BinarySearch(SeqList L, int key) &amp;#123; int i = 0; int low = 0, high = L->length - 1; int middle = 0; while (low &lt;= high) &amp;#123; middle = (low + high) / 2; // 计算middle的值为两者中心 int val = L->data[middle]; printf(\"第%2d次比较，low=%3d，high=%3d，middle=%3d，数值：%3d，结果：\", i++, low, high, middle, L->data[middle]); if (val &lt; key) &amp;#123; low = middle + 1; // 如果给定的值比当前中心位置大，则让low指针指向middle的下一个位置 &amp;#125; else if (val > key) &amp;#123; high = middle - 1; // 如果给定的值比当前中心位置小，则让high指针指向middle的上一个位置 &amp;#125; else &amp;#123; printf(\"成功。\\n\"); return middle; &amp;#125; printf(\"失败。\\n\"); &amp;#125; // 当low的值大于high的值时，while循环退出，此时说明没有查找到目标的值，返回-1。 return -1; &amp;#125; int main(void) &amp;#123; int key; SeqList L = (SeqList)malloc(sizeof(List)); printf(\"----- 折半查找演示程序 ------\\n\"); printf(\"顺序表存放1-1000之间的整数，请输入你要查找的数：\"); InitList(L); scanf(\"%d\", &amp;key); printf(\"index = %d\\n\", BinarySearch(L, key)); return 0; &amp;#125; 运行截图：","categories":[{"name":"数据结构 - 查找","slug":"数据结构-查找","permalink":"http://mythe51.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9F%A5%E6%89%BE/"}],"tags":[{"name":"考研408","slug":"考研408","permalink":"http://mythe51.github.io/tags/%E8%80%83%E7%A0%94408/"}]},{"title":"米游社api相关","slug":"米游社api相关","date":"2022-05-09T11:00:00.000Z","updated":"2022-05-11T04:03:23.236Z","comments":true,"path":"2022/05/09/米游社api相关/","link":"","permalink":"http://mythe51.github.io/2022/05/09/%E7%B1%B3%E6%B8%B8%E7%A4%BEapi%E7%9B%B8%E5%85%B3/","excerpt":"","text":"请求规范（请求头） 字段 说明 参考值（无特殊需求可以照抄） x-rpc-app_version 米游社app版本 2.11.1 User-Agent UA字段 Mozilla/5.0 AppleWebKit/605.1.15 (KHTML, like Gecko) miHoYoBBS/2.11.1 x-rpc-client_type 客户端类型 5 Referer Referer字段 https://webstatic.mihoyo.com/ Cookie 米游社Cookie 浏览器登录米游社，F12找到控制台，输入”document.cookie”回车即可，如下图 DS 动态密钥 生成方法如下 动态密钥动态密钥由3部分构成，最后一部分是一个MD5。MD5的输入由5个部分构成，按照如下格式进行组合： data = f\"salt=&#123;CN_DS_SALT&#125;&t=&#123;t&#125;&r=&#123;r&#125;&b=&#123;b&#125;&q=&#123;q&#125;\" 参数说明： 参数 含义 CN_DS_SALT 盐，在当前版本的米游社app里这个值是“xV8v4Qu54lUKrEYFZkJhB8cuOh9Asafs” t 时间戳 r 一个从100000到200000的随机数 b POST请求的数据，需要将字典对象序列化 q GET请求的数据，形如”aaa=aaa&amp;bbb=bbb&amp;ccc=ccc” 伪代码如下： data = \"salt=&#123;CN_DS_SALT&#125;&t=&#123;t&#125;&r=&#123;r&#125;&b=&#123;b&#125;&q=&#123;q&#125;\" md5data = md5(data) DS = \"&#123;t&#125;,&#123;r&#125;,&#123;h&#125;\" 给出两种实现方式： python（@heartalborada） CN_DS_SALT = 'xV8v4Qu54lUKrEYFZkJhB8cuOh9Asafs' def generate_cn_ds(body = None, query = None) -> str: ''' Body: POST请求 query: GET请求 ''' t = int(time.time()) r = random.randint(100001, 200000) b = json.dumps(body) if body else \"\" q = \"&amp;\".join(f\"&amp;#123;k&amp;#125;=&amp;#123;v&amp;#125;\" for k, v in sorted(query.items())) if query else \"\" h = hashlib.md5(f\"salt=&amp;#123;CN_DS_SALT&amp;#125;&amp;t=&amp;#123;t&amp;#125;&amp;r=&amp;#123;r&amp;#125;&amp;b=&amp;#123;b&amp;#125;&amp;q=&amp;#123;q&amp;#125;\".encode()).hexdigest() return f\"&amp;#123;t&amp;#125;,&amp;#123;r&amp;#125;,&amp;#123;h&amp;#125;\" C#（@DGP-Studio） using Snap.Data.Json; using Snap.Data.Utility; using System; using System.Linq; public class DynamicSecretProvider2 : Md5Converter &#123; private static readonly string APISalt = \"xV8v4Qu54lUKrEYFZkJhB8cuOh9Asafs\"; public static string Create(string queryUrl, object? postBody = null) &#123; long t = DateTimeOffset.UtcNow.ToUnixTimeSeconds(); string r = GetRandomString(); string b = postBody is null ? \"\" : Json.Stringify(postBody); string q = \"\"; string[] urlParts = queryUrl.Split('?'); if (urlParts.Length == 2) &#123; string[] queryParams = urlParts[1].Split('&').OrderBy(x => x).ToArray(); q = string.Join(\"&\", queryParams); &#125; string check = GetComputedMd5($\"salt=&#123;APISalt&#125;&t=&#123;t&#125;&r=&#123;r&#125;&b=&#123;b&#125;&q=&#123;q&#125;\"); return $\"&#123;t&#125;,&#123;r&#125;,&#123;check&#125;\"; &#125; private static readonly Random random = new(); private static string GetRandomString() &#123; return random.Next(100000, 200000).ToString(); &#125; &#125; APIUID 查询玩家基本信息url：https://api-takumi-record.mihoyo.com/game_record/app/genshin/api/index 请求方式：GET 传入字段 说明 值 role_id 玩家UID 如“100010000” server 玩家所在服务器 “cn_gf01”国服官服，“cn_qd01”国服B服 获取角色武器和圣遗物url：https://api-takumi-record.mihoyo.com/game_record/app/genshin/api/character 请求方式：POST 传入字段 说明 值 character_ids 要查询的角色id 传入空数组即可，即 []，可获取全部角色 role_id 玩家UID 如“100010000” server 玩家所在服务器 “cn_gf01”国服官服，“cn_qd01”国服B服 获取档期和上期角色数据url：https://api-takumi-record.mihoyo.com/game_record/app/genshin/api/spiralAbyss 请求方式：GET 传入字段 说明 值 role_id 玩家UID 如“100010000” server 玩家所在服务器 “cn_gf01”国服官服，“cn_qd01”国服B服 schedule_type 档期类型 “1”为本期，“2”为上期","categories":[{"name":"默认","slug":"默认","permalink":"http://mythe51.github.io/categories/%E9%BB%98%E8%AE%A4/"}],"tags":[{"name":"默认","slug":"默认","permalink":"http://mythe51.github.io/tags/%E9%BB%98%E8%AE%A4/"}]},{"title":"abccc","slug":"abccc","date":"2022-04-21T07:25:36.000Z","updated":"2022-04-21T07:26:47.606Z","comments":true,"path":"2022/04/21/abccc/","link":"","permalink":"http://mythe51.github.io/2022/04/21/abccc/","excerpt":"","text":"this is a test blog","categories":[{"name":"默认","slug":"默认","permalink":"http://mythe51.github.io/categories/%E9%BB%98%E8%AE%A4/"}],"tags":[{"name":"默认","slug":"默认","permalink":"http://mythe51.github.io/tags/%E9%BB%98%E8%AE%A4/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-04-21T04:50:44.934Z","updated":"1985-10-26T08:15:00.000Z","comments":true,"path":"2022/04/21/hello-world/","link":"","permalink":"http://mythe51.github.io/2022/04/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"数据结构 - 查找","slug":"数据结构-查找","permalink":"http://mythe51.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%9F%A5%E6%89%BE/"},{"name":"默认","slug":"默认","permalink":"http://mythe51.github.io/categories/%E9%BB%98%E8%AE%A4/"}],"tags":[{"name":"考研408","slug":"考研408","permalink":"http://mythe51.github.io/tags/%E8%80%83%E7%A0%94408/"},{"name":"默认","slug":"默认","permalink":"http://mythe51.github.io/tags/%E9%BB%98%E8%AE%A4/"}]}